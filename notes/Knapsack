- Knapsack Problems
    > Fractional Knapsack (Greedy) - can add item in fractions
    > 0/1 Knapsack - can either add the item or not (multiple occurances of item not allowed)
    > Unbounded Knapsack - can add the item of same type multiple times (multiple occurances of item is allowed)

- What is Knapsack

Bag :  having capacity/weight (W/C) = 7

Items :              I1  I2  I3  I4
    (w) weight[]     1   3   4   5
     (v) value[]     1   4   5   7

Fill the bag so that your profit will be maximum ?


0/1 Knapsack :
--------------
    > According to give i/p and condition create choice Diagram (i.e whether to add item or not)
    > Write Recursive Fun

    How to write recursive fun :
    ----------------------------
    
    function knapsack(w, v, W, n) {
        // Base condition
        // Code for Choice Diagram
    }
    Where, w = weight array, v = value array, W = capacity of Bag, n = length of items array

    Base condition : 
    ----------------
        > Think of the smallest valid i/p
            eg: w.length                                        = 0 
                v.length                                        = 0
                n (length of items array)                       = 0
                       W                                        = 0

            cond : if(n === 0 || W === 0) {
                        return 0;
                    }           

    Code for Choice Diagram : 
    -------------------------

    let say Item1 having weight w1, Choice Diagram is   Item1 [w1]
                                                         /      \
                                                       w1<=W    w1 > W
                                                       /   \      \
                                                      yes  no     no

    //Final Code
    -------------

    function knapsack(w, v, W, n) {
        
        if(n === 0 || W === 0) {
            return 0
        }

        if(w[n-1] <= W) {
            return max(v[n-1] + knapsack(w, v, W - w[n-1], n-1), knapsack(w, v, W, n-1))
        } 
        else if(w[n-1] > W) {
            return knapsack(w, v, W, n-1)
        }
    }




